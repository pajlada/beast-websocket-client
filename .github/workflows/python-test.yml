---
name: Python tests

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  test:
    name: "Test ${{ matrix.os }}, Python ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.11"]
        os: ["windows-latest", "macos-latest", "ubuntu-20.04", "ubuntu-22.04"]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: ./venv
          key: ${{ matrix.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python3 -m venv venv
          python3 -m pip install -r requirements.txt

      - name: Run tests
        run: ./venv/bin/pytest

  check_format:
    name: "Check format ubuntu-latest, Python ${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.1.1"]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: ./venv
          key: ubuntu-latest-${{ steps.setup-python.outputs.python-version }}-prod@${{ hashFiles('requirements.txt') }}-dev@${{ hashFiles('requirements-dev.txt') }}

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: ./scripts/venvinstall.sh --dev

      - name: Check code style
        run: . venv/bin/activate && ./scripts/reformat.sh --check
